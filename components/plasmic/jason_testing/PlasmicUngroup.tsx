// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iTYzeKnrXvzQT22ANsbdfq
// Component: QJqxQ9Sc3N
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantst5XzJhInfPwU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: t5XZJh_InfPwU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_jason_testing.module.css"; // plasmic-import: iTYzeKnrXvzQT22ANsbdfq/projectcss
import sty from "./PlasmicUngroup.module.css"; // plasmic-import: QJqxQ9Sc3N/css

export type PlasmicUngroup__VariantMembers = {};
export type PlasmicUngroup__VariantsArgs = {};
type VariantPropType = keyof PlasmicUngroup__VariantsArgs;
export const PlasmicUngroup__VariantProps = new Array<VariantPropType>();

export type PlasmicUngroup__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicUngroup__ArgsType;
export const PlasmicUngroup__ArgProps = new Array<ArgPropType>("children");

export type PlasmicUngroup__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultUngroupProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicUngroup__RenderFunc(props: {
  variants: PlasmicUngroup__VariantsArgs;
  args: PlasmicUngroup__ArgsType;
  overrides: PlasmicUngroup__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantst5XzJhInfPwU()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__yc5Er
          )}
        >
          {"ABC"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lyVh5
          )}
        >
          {hasVariant(globalVariants, "screen", "mobile") ? "B" : "DEF"}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: "XYZ",
          value: args.children
        })}

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wXu7
          )}
        >
          {"GHI"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__gpQ7O
          )}
        >
          {"Click Me"}
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___1JfBc
          )}
        >
          {"Enter some text"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUngroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUngroup__VariantsArgs;
    args?: PlasmicUngroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicUngroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicUngroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicUngroup__ArgProps,
          internalVariantPropNames: PlasmicUngroup__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicUngroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUngroup";
  } else {
    func.displayName = `PlasmicUngroup.${nodeName}`;
  }
  return func;
}

export const PlasmicUngroup = Object.assign(
  // Top-level PlasmicUngroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicUngroup
    internalVariantProps: PlasmicUngroup__VariantProps,
    internalArgProps: PlasmicUngroup__ArgProps
  }
);

export default PlasmicUngroup;
/* prettier-ignore-end */
